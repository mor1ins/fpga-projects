
// gammaCorrector.v generated by Lattice IP Model Creator version 1
// created on Thu Jan 22 11:48:42 PST 2015
// Copyright(c) 2007 Lattice Semiconductor Corporation. All rights reserved
// obfuscator_exe version 1.mar0807

// top






























`timescale 1 ns / 100 ps
module hq2a832_gammaCorrector (
               
               clk,                 
               rstn,                
               ce,                  
               sr,                  
               din0,                
               din1,                
               dmeefd8,             
               ww77ec3,              

               
               dout0,               
               dout1                
               );
parameter fnd863b         = 8;
parameter pebr_thresh         = 5;
parameter cb18efd           = 0;
parameter fnc77ec      = 0;
parameter sw3bf67            = 1;
parameter pdevice_family      = "ECP2";
parameter yxfd9c3          = "lut0_init.mem";
localparam thece1d         = 2**fnd863b;
input                                     clk;
input                                     rstn;
input                                     ce;
input                                     sr;
input  [fnd863b-1:0]                  din0;
input  [fnd863b-1:0]                  din1;
input                                     dmeefd8;
input  [fnd863b-1:0]                  ww77ec3;
output [fnd863b-1:0]                  dout0;
output [fnd863b-1:0]                  dout1;
reg    [fnd863b-1:0]                  dout0;
wire   [fnd863b-1:0]                  hdc634;
reg    [fnd863b-1:0]                  dout1;
wire   [fnd863b-1:0]                  wy34ca4;
wire   [fnd863b-1:0]                  nt32908;
reg    [fnd863b-1:0]                  sja4236;
reg    [fnd863b-1:0]                  ir8da9;
wire   [fnd863b-1:0]                  gd36a68;
reg    [fnd863b-1:0]                  aaa9a26;
reg    [fnd863b-1:0]                  qg68982;
wire   [fnd863b-1:0]                  kf26085;
reg tw3042c;
reg uk82162;
reg [fnd863b - 1 : 0] wl85888;
reg [fnd863b - 1 : 0] yk6222d;
reg ba11168;
reg [fnd863b - 1 : 0] pf45a19;
reg [fnd863b - 1 : 0] ay6867f;
reg [fnd863b - 1 : 0] rv19fc9;
reg [fnd863b - 1 : 0] cz7f272;
reg [fnd863b - 1 : 0] wjc9cae;
reg [fnd863b - 1 : 0] os72bad;
reg [fnd863b - 1 : 0] wlaeb44;
reg [fnd863b - 1 : 0] hqad12d;
reg [fnd863b - 1 : 0] mr44b58;
reg [fnd863b - 1 : 0] vx2d62a;
reg [2047:0] nr6b157;
wire [14:0] vi58abe;






localparam zkc55f2 = 15,tw2af92 = 32'hfdffc68b;
localparam [31:0] vi57c93 = tw2af92;
localparam ipf24dd = tw2af92 & 4'hf;
localparam [11:0] ri93768 = 'h7ff;
wire [(1 << ipf24dd) -1:0] zxdda17;
reg [zkc55f2-1:0] ui685f5;
reg [ipf24dd-1:0] an17d4a [0:1];
reg [ipf24dd-1:0] kqf52ac;
reg aaa9560;
integer bl4ab01;
integer pf5580e;

            assign kf26085 = 0;
generate   if (sw3bf67 == 1) begin      pmi_ram_dp_true #(         .pmi_addr_depth_a  (thece1d),         .pmi_addr_width_a  (fnd863b),         .pmi_data_width_a  (fnd863b),         .pmi_addr_depth_b  (thece1d),         .pmi_addr_width_b  (fnd863b),         .pmi_data_width_b  (fnd863b),         .pmi_regmode_a     ("reg"),         .pmi_regmode_b     ("reg"),         .pmi_gsr           ("enable"),         .pmi_resetmode     ("sync"),         .pmi_init_file     (yxfd9c3),         .pmi_init_file_format("binary"),         .pmi_write_mode_a  ("normal"),         .pmi_write_mode_b  ("normal"),         .pmi_family        (pdevice_family),         .module_type       ("pmi_ram_dp_true")         )      sw9d1b5 (            .DataInA     (ww77ec3),            .DataInB     (),            .AddressA    (din0),            .AddressB    (din1),            .ClockA      (clk),            .ClockB      (clk),            .ClockEnA    (ce),            .ClockEnB    (ce),            .WrA         (dmeefd8),            .WrB         (1'b0),            .ResetA      (1'b0),            .ResetB      (1'b0),            .QA          (hdc634),            .QB          (wy34ca4)            );   end   else if (fnc77ec == 1) begin      pmi_distributed_dpram #(         .pmi_addr_depth      (thece1d),         .pmi_addr_width      (fnd863b),         .pmi_data_width      (fnd863b),         .pmi_regmode         ("reg"),         .pmi_init_file       ("none"),         .pmi_init_file_format("binary"),         .pmi_family          (pdevice_family),         .module_type         ("pmi_distributed_dpram")         )      ks1557d (            .Data        (ww77ec3),            .WrAddress   (din0),            .WrClock     (clk),            .WrClockEn   (ce),            .WE          (dmeefd8),            .RdAddress   (din0),            .RdClock     (clk),            .RdClockEn   (ce),            .Reset       (~rstn),            .Q           (nt32908)            );      pmi_distributed_dpram #(         .pmi_addr_depth      (thece1d),         .pmi_addr_width      (fnd863b),         .pmi_data_width      (fnd863b),         .pmi_regmode         ("reg"),         .pmi_init_file       ("none"),         .pmi_init_file_format("binary"),         .pmi_family          (pdevice_family),         .module_type         ("pmi_distributed_dpram")         )      os5c835 (            .Data        (kf26085),            .WrAddress   (kf26085),            .WrClock     (clk),            .WrClockEn   (ce),            .WE          (1'b0),            .RdAddress   (din1),            .RdClock     (clk),            .RdClockEn   (ce),            .Reset       (~rstn),            .Q           (gd36a68)            );      assign hdc634 = wjc9cae;      assign wy34ca4 = hqad12d;   end   else begin      pmi_distributed_rom #(         .pmi_addr_depth      (thece1d),         .pmi_addr_width      (fnd863b),         .pmi_data_width      (fnd863b),         .pmi_regmode         ("reg"),         .pmi_init_file       (yxfd9c3),         .pmi_init_file_format("binary"),         .pmi_family          (pdevice_family),         .module_type         ("pmi_distributed_rom")         )      ps4214d (            .Address     (din0),            .OutClock    (clk),            .OutClockEn  (ce),            .Reset       (~rstn),            .Q           (nt32908)            );      pmi_distributed_rom #(         .pmi_addr_depth      (thece1d),         .pmi_addr_width      (fnd863b),         .pmi_data_width      (fnd863b),         .pmi_regmode         ("reg"),         .pmi_init_file       (yxfd9c3),         .pmi_init_file_format("binary"),         .pmi_family          (pdevice_family),         .module_type         ("pmi_distributed_rom")         )      xyb227e (            .Address     (din1),            .OutClock    (clk),            .OutClockEn  (ce),            .Reset       (~rstn),            .Q           (gd36a68)            );      assign hdc634 = wjc9cae;      assign wy34ca4 = hqad12d;   end
endgenerate
      always @(posedge clk or negedge rstn) begin         if(rstn==1'b0) begin            sja4236 <= 'b0;            ir8da9 <= 'b0;            aaa9a26 <= 'b0;            qg68982 <= 'b0;         end         else  if (tw3042c) begin            if (uk82162)  begin               sja4236 <= 'b0;               ir8da9 <= 'b0;               aaa9a26 <= 'b0;               qg68982 <= 'b0;            end            else begin               sja4236 <= cz7f272;               ir8da9 <= wjc9cae;               aaa9a26 <= wlaeb44;               qg68982 <= hqad12d;            end         end      end

      always @(posedge clk or negedge rstn) begin         if(rstn==1'b0) begin            dout0 <= 'b0;            dout1 <= 'b0;         end         else  if (tw3042c) begin            if (uk82162)  begin               dout0 <= 'b0;               dout1 <= 'b0;            end            else begin               dout0 <= ay6867f;               dout1 <= rv19fc9;            end         end      end
always@* begin tw3042c<=vi58abe[0];uk82162<=vi58abe[1];wl85888<={din0>>1,vi58abe[2]};yk6222d<={din1>>1,vi58abe[3]};ba11168<=vi58abe[4];pf45a19<={ww77ec3>>1,vi58abe[5]};ay6867f<={hdc634>>1,vi58abe[6]};rv19fc9<={wy34ca4>>1,vi58abe[7]};cz7f272<={nt32908>>1,vi58abe[8]};wjc9cae<={sja4236>>1,vi58abe[9]};os72bad<={ir8da9>>1,vi58abe[10]};wlaeb44<={gd36a68>>1,vi58abe[11]};hqad12d<={aaa9a26>>1,vi58abe[12]};mr44b58<={qg68982>>1,vi58abe[13]};vx2d62a<={kf26085>>1,vi58abe[14]};end
always@* begin nr6b157[2047]<=sr;nr6b157[2046]<=din0[0];nr6b157[2044]<=din1[0];nr6b157[2040]<=dmeefd8;nr6b157[2032]<=ww77ec3[0];nr6b157[2017]<=hdc634[0];nr6b157[1987]<=wy34ca4[0];nr6b157[1926]<=nt32908[0];nr6b157[1805]<=sja4236[0];nr6b157[1562]<=ir8da9[0];nr6b157[1076]<=gd36a68[0];nr6b157[1023]<=ce;nr6b157[419]<=kf26085[0];nr6b157[209]<=qg68982[0];nr6b157[104]<=aaa9a26[0];end         assign zxdda17 = nr6b157,vi58abe = ui685f5; initial begin bl4ab01 = $fopen(".fred"); $fdisplay( bl4ab01, "%3h\n%3h", (vi57c93 >> 4) & ri93768, (vi57c93 >> (ipf24dd+4)) & ri93768 ); $fclose(bl4ab01); $readmemh(".fred", an17d4a); end always @ (zxdda17) begin kqf52ac = an17d4a[1]; for (pf5580e=0; pf5580e<zkc55f2; pf5580e=pf5580e+1) begin ui685f5[pf5580e] = zxdda17[kqf52ac]; aaa9560 = ^(kqf52ac & an17d4a[0]); kqf52ac = {kqf52ac, aaa9560}; end end 
endmodule





























`timescale 1 ns / 100 ps
module hq9c047_gammaCorrector (
               
               clk,                 
               rstn,                
               ce,                  
               sr,                  
               ec3b2ab,                 

               
               ofd9559                 
               );
parameter zkcaacd           = 8;
input                                     clk;
input                                     rstn;
input                                     ce;
input                                     sr;
input  [zkcaacd-1:0]                   ec3b2ab;
output [zkcaacd-1:0]                   ofd9559;
reg    [zkcaacd-1:0]                   ofd9559;
reg tw3042c;
reg uk82162;
reg [zkcaacd - 1 : 0] db651b;
reg [2047:0] nr6b157;
wire [2:0] vi58abe;

localparam zkc55f2 = 3,tw2af92 = 32'hfdffc68b;
localparam [31:0] vi57c93 = tw2af92;
localparam ipf24dd = tw2af92 & 4'hf;
localparam [11:0] ri93768 = 'h7ff;
wire [(1 << ipf24dd) -1:0] zxdda17;
reg [zkc55f2-1:0] ui685f5;
reg [ipf24dd-1:0] an17d4a [0:1];
reg [ipf24dd-1:0] kqf52ac;
reg aaa9560;
integer bl4ab01;
integer pf5580e;



         always @(posedge clk or negedge rstn) begin      if (!rstn)         ofd9559 <= 0;      else if (tw3042c) begin         if (uk82162)            ofd9559 <= 0;         else            ofd9559 <= db651b;      end   end


always@* begin tw3042c<=vi58abe[0];uk82162<=vi58abe[1];db651b<={ec3b2ab>>1,vi58abe[2]};end
always@* begin nr6b157[2047]<=sr;nr6b157[2046]<=ec3b2ab[0];nr6b157[1023]<=ce;end         assign zxdda17 = nr6b157,vi58abe = ui685f5; initial begin bl4ab01 = $fopen(".fred"); $fdisplay( bl4ab01, "%3h\n%3h", (vi57c93 >> 4) & ri93768, (vi57c93 >> (ipf24dd+4)) & ri93768 ); $fclose(bl4ab01); $readmemh(".fred", an17d4a); end always @ (zxdda17) begin kqf52ac = an17d4a[1]; for (pf5580e=0; pf5580e<zkc55f2; pf5580e=pf5580e+1) begin ui685f5[pf5580e] = zxdda17[kqf52ac]; aaa9560 = ^(kqf52ac & an17d4a[0]); kqf52ac = {kqf52ac, aaa9560}; end end 
endmodule





























`timescale 1 ns / 100 ps
module rt74468_gammaCorrector (
               
               clk,                 
               rstn,                
               ce,                  
               sr,                  
               gcen,                
               nt32401,         
               co9200f,         
               din0,                
               din1,                
               din2,                
               ymf163,              
               su78b19,              
               vic58c9,              

               
               sj2c64b,          
               dout2,               
               dout1,               
               dout0                
               );
parameter pdata0_width           = 8;
parameter pdata1_width           = 8;
parameter pdata2_width           = 8;
parameter platency               = 4;
parameter pinput_serial          = 0;
input                                     clk;
input                                     rstn;
input                                     ce;
input                                     sr;
input                                     gcen;
input  [pdata0_width-1:0]                 din0;
input  [pdata1_width-1:0]                 din1;
input  [pdata2_width-1:0]                 din2;
input  [pdata0_width-1:0]                 ymf163;
input  [pdata1_width-1:0]                 su78b19;
input  [pdata2_width-1:0]                 vic58c9;
input                                     nt32401;
input                                     co9200f;
output                                    sj2c64b;
output [pdata0_width-1:0]                 dout0;
output [pdata1_width-1:0]                 dout1;
output [pdata2_width-1:0]                 dout2;
reg                                       os43096;
reg                                       oh184b1;
reg                                       blc258d;
reg                                       oh12c6f;
reg                                       vk9637d;
reg    [pdata0_width-1:0]                 wy8df55;
reg    [pdata0_width-1:0]                 ea7d54d;
reg    [pdata0_width-1:0]                 nr55341;
reg    [pdata0_width-1:0]                 ne4d078;
reg    [pdata0_width-1:0]                 gb41e11;
reg    [pdata1_width-1:0]                 ic78469;
reg    [pdata1_width-1:0]                 ls11a47;
reg    [pdata1_width-1:0]                 tu691d0;
reg    [pdata1_width-1:0]                 vi4741b;
reg    [pdata1_width-1:0]                 ned06db;
reg    [pdata2_width-1:0]                 fc1b6db;
reg    [pdata2_width-1:0]                 medb6d0;
reg    [pdata2_width-1:0]                 sudb400;
reg    [pdata2_width-1:0]                 vid0002;
reg    [pdata2_width-1:0]                 aa9c;
reg    [pdata0_width-1:0]                 dout0;
reg    [pdata1_width-1:0]                 dout1;
reg    [pdata2_width-1:0]                 dout2;
reg                                       sj2c64b;
reg tw3042c;
reg uk82162;
reg czd9257;
reg ipc92bd;
reg qg495ec;
reg [pdata0_width - 1 : 0] wl85888;
reg [pdata1_width - 1 : 0] yk6222d;
reg [pdata2_width - 1 : 0] db66fc;
reg [pdata0_width - 1 : 0] lf9bf3d;
reg [pdata1_width - 1 : 0] blfcf7b;
reg [pdata2_width - 1 : 0] vx3defd;
reg suef7ef;
reg ld7bf78;
reg nedfbc6;
reg shfde33;
reg uief19d;
reg [pdata0_width - 1 : 0] shc6741;
reg [pdata0_width - 1 : 0] co9d06c;
reg [pdata0_width - 1 : 0] mr41b0d;
reg [pdata0_width - 1 : 0] tu6c36d;
reg [pdata0_width - 1 : 0] uxdb5e;
reg [pdata1_width - 1 : 0] me6d7a8;
reg [pdata1_width - 1 : 0] wj5ea0f;
reg [pdata1_width - 1 : 0] baa83e8;
reg [pdata1_width - 1 : 0] qifa1d;
reg [pdata1_width - 1 : 0] uve8740;
reg [pdata2_width - 1 : 0] sj1d028;
reg [pdata2_width - 1 : 0] xj40a2d;
reg [pdata2_width - 1 : 0] zz28b78;
reg [pdata2_width - 1 : 0] xl2de37;
reg [pdata2_width - 1 : 0] ea78df4;
reg [2047:0] nr6b157;
wire [30:0] vi58abe;

localparam zkc55f2 = 31,tw2af92 = 32'hfdffca8b;
localparam [31:0] vi57c93 = tw2af92;
localparam ipf24dd = tw2af92 & 4'hf;
localparam [11:0] ri93768 = 'h7ff;
wire [(1 << ipf24dd) -1:0] zxdda17;
reg [zkc55f2-1:0] ui685f5;
reg [ipf24dd-1:0] an17d4a [0:1];
reg [ipf24dd-1:0] kqf52ac;
reg aaa9560;
integer bl4ab01;
integer pf5580e;

            



               always @(posedge clk or negedge rstn) begin         if(rstn==1'b0) begin            os43096 <= 1'b0;            oh184b1 <= 1'b0;            blc258d <= 1'b0;            oh12c6f <= 1'b0;            vk9637d <= 1'b0;            wy8df55 <= 'b0;            ea7d54d <= 'b0;            nr55341 <= 'b0;            ne4d078 <= 'b0;            gb41e11 <= 'b0;            ic78469 <= 'b0;            ls11a47 <= 'b0;            tu691d0 <= 'b0;            vi4741b <= 'b0;            ned06db <= 'b0;            fc1b6db <= 'b0;            medb6d0 <= 'b0;            sudb400 <= 'b0;            vid0002 <= 'b0;            aa9c <= 'b0;         end         else  if (tw3042c) begin            if (uk82162)  begin               os43096 <= 1'b0;               oh184b1 <= 1'b0;               blc258d <= 1'b0;               oh12c6f <= 1'b0;               vk9637d <= 1'b0;               wy8df55 <= 'b0;               ea7d54d <= 'b0;               nr55341 <= 'b0;               ne4d078 <= 'b0;               gb41e11 <= 'b0;               ic78469 <= 'b0;               ls11a47 <= 'b0;               tu691d0 <= 'b0;               vi4741b <= 'b0;               ned06db <= 'b0;               fc1b6db <= 'b0;               medb6d0 <= 'b0;               sudb400 <= 'b0;               vid0002 <= 'b0;               aa9c <= 'b0;            end            else begin               os43096 <= czd9257;               oh184b1 <= suef7ef;               blc258d <= ld7bf78;               oh12c6f <= nedfbc6;               vk9637d <= shfde33;               wy8df55 <= wl85888;               ea7d54d <= shc6741;               nr55341 <= co9d06c;               ne4d078 <= mr41b0d;               gb41e11 <= tu6c36d;               ic78469 <= yk6222d;               ls11a47 <= me6d7a8;               tu691d0 <= wj5ea0f;               vi4741b <= baa83e8;               ned06db <= qifa1d;               fc1b6db <= db66fc;               medb6d0 <= sj1d028;               sudb400 <= xj40a2d;               vid0002 <= zz28b78;               aa9c <= xl2de37;            end         end      end

generate   if (pinput_serial == 1) begin            always @(posedge clk or negedge rstn) begin         if(rstn==1'b0) begin            dout0 <= 0;            dout1 <= 0;            dout2 <= 0;            sj2c64b <= 1'b0;         end         else  if (tw3042c) begin            if (uk82162)  begin               dout0 <= 0;               dout1 <= 0;               dout2 <= 0;               sj2c64b <= 1'b0;            end            else begin                              sj2c64b <= shfde33 ;               if (shfde33) begin                  dout0 <= lf9bf3d;                  dout1 <= blfcf7b;                  dout2 <= vx3defd;               end               else begin                  dout0 <= tu6c36d;                  dout1 <= qifa1d;                  dout2 <= xl2de37;               end            end         end      end   end   else begin            always @(posedge clk or negedge rstn) begin         if(rstn==1'b0) begin            dout0 <= 0;            dout1 <= 0;            dout2 <= 0;            sj2c64b <= 1'b0;         end         else  if (tw3042c) begin            if (uk82162)  begin               dout0 <= 0;               dout1 <= 0;               dout2 <= 0;               sj2c64b <= 1'b0;            end            else begin                              sj2c64b <= nedfbc6 ;               if (nedfbc6) begin                  dout0 <= lf9bf3d;                  dout1 <= blfcf7b;                  dout2 <= vx3defd;               end               else begin                  dout0 <= mr41b0d;                  dout1 <= baa83e8;                  dout2 <= zz28b78;               end            end         end      end   end
endgenerate
always@* begin tw3042c<=vi58abe[0];uk82162<=vi58abe[1];czd9257<=vi58abe[2];ipc92bd<=vi58abe[3];qg495ec<=vi58abe[4];wl85888<={din0>>1,vi58abe[5]};yk6222d<={din1>>1,vi58abe[6]};db66fc<={din2>>1,vi58abe[7]};lf9bf3d<={ymf163>>1,vi58abe[8]};blfcf7b<={su78b19>>1,vi58abe[9]};vx3defd<={vic58c9>>1,vi58abe[10]};suef7ef<=vi58abe[11];ld7bf78<=vi58abe[12];nedfbc6<=vi58abe[13];shfde33<=vi58abe[14];uief19d<=vi58abe[15];shc6741<={wy8df55>>1,vi58abe[16]};co9d06c<={ea7d54d>>1,vi58abe[17]};mr41b0d<={nr55341>>1,vi58abe[18]};tu6c36d<={ne4d078>>1,vi58abe[19]};uxdb5e<={gb41e11>>1,vi58abe[20]};me6d7a8<={ic78469>>1,vi58abe[21]};wj5ea0f<={ls11a47>>1,vi58abe[22]};baa83e8<={tu691d0>>1,vi58abe[23]};qifa1d<={vi4741b>>1,vi58abe[24]};uve8740<={ned06db>>1,vi58abe[25]};sj1d028<={fc1b6db>>1,vi58abe[26]};xj40a2d<={medb6d0>>1,vi58abe[27]};zz28b78<={sudb400>>1,vi58abe[28]};xl2de37<={vid0002>>1,vi58abe[29]};ea78df4<={aa9c>>1,vi58abe[30]};end
always@* begin nr6b157[2047]<=sr;nr6b157[2046]<=gcen;nr6b157[2044]<=nt32401;nr6b157[2040]<=co9200f;nr6b157[2032]<=din0[0];nr6b157[2017]<=din1[0];nr6b157[1987]<=din2[0];nr6b157[1926]<=ymf163[0];nr6b157[1804]<=su78b19[0];nr6b157[1803]<=tu691d0[0];nr6b157[1560]<=vic58c9[0];nr6b157[1558]<=vi4741b[0];nr6b157[1550]<=wy8df55[0];nr6b157[1464]<=aa9c[0];nr6b157[1072]<=os43096;nr6b157[1069]<=ned06db[0];nr6b157[1052]<=ea7d54d[0];nr6b157[1023]<=ce;nr6b157[901]<=ls11a47[0];nr6b157[775]<=vk9637d;nr6b157[732]<=vid0002[0];nr6b157[450]<=ic78469[0];nr6b157[387]<=oh12c6f;nr6b157[366]<=sudb400[0];nr6b157[225]<=gb41e11[0];nr6b157[193]<=blc258d;nr6b157[183]<=medb6d0[0];nr6b157[112]<=ne4d078[0];nr6b157[96]<=oh184b1;nr6b157[91]<=fc1b6db[0];nr6b157[56]<=nr55341[0];end         assign zxdda17 = nr6b157,vi58abe = ui685f5; initial begin bl4ab01 = $fopen(".fred"); $fdisplay( bl4ab01, "%3h\n%3h", (vi57c93 >> 4) & ri93768, (vi57c93 >> (ipf24dd+4)) & ri93768 ); $fclose(bl4ab01); $readmemh(".fred", an17d4a); end always @ (zxdda17) begin kqf52ac = an17d4a[1]; for (pf5580e=0; pf5580e<zkc55f2; pf5580e=pf5580e+1) begin ui685f5[pf5580e] = zxdda17[kqf52ac]; aaa9560 = ^(kqf52ac & an17d4a[0]); kqf52ac = {kqf52ac, aaa9560}; end end 
endmodule





























`timescale 1 ns / 100 ps
module gq583d_gammaCorrector (
               
               clk,                 
               rstn,                
               ce,                  
               sr,                  
               inpvalid,            

               
               vi4d936,       
               vi6c9b3,       
               outvalid             
               );
parameter platency              = 4;
parameter pinput_serial         = 0;
parameter pinreg                = 0;
input                                     clk;
input                                     rstn;
input                                     ce;
input                                     sr;
input                                     inpvalid;
output                                    vi4d936;
output                                    vi6c9b3;
output                                    outvalid;
reg                                       xj7b4c4[0:platency-1];
integer                                   ipd313a;
reg tw3042c;
reg uk82162;
reg fp27501;
reg [2047:0] nr6b157;
wire [2:0] vi58abe;

localparam zkc55f2 = 3,tw2af92 = 32'hfdffe06b;
localparam [31:0] vi57c93 = tw2af92;
localparam ipf24dd = tw2af92 & 4'hf;
localparam [11:0] ri93768 = 'h7ff;
wire [(1 << ipf24dd) -1:0] zxdda17;
reg [zkc55f2-1:0] ui685f5;
reg [ipf24dd-1:0] an17d4a [0:1];
reg [ipf24dd-1:0] kqf52ac;
reg aaa9560;
integer bl4ab01;
integer pf5580e;

      


      assign vi4d936 = xj7b4c4[platency-2];   assign vi6c9b3 = xj7b4c4[platency-3];   assign outvalid      = xj7b4c4[platency-1];
   always @(posedge clk or negedge rstn) begin      if (!rstn) begin         for (ipd313a=0;ipd313a<platency;ipd313a=ipd313a+1) begin            xj7b4c4[ipd313a]    <= 1'b0;         end      end      else if (tw3042c) begin         if (uk82162)  begin            for (ipd313a=0;ipd313a<platency;ipd313a=ipd313a+1) begin               xj7b4c4[ipd313a]    <= 1'b0;            end         end         else begin            xj7b4c4[0] <= fp27501;            for (ipd313a=1;ipd313a<platency;ipd313a=ipd313a+1) begin               xj7b4c4[ipd313a]    <= xj7b4c4[ipd313a-1];            end         end      end   end


always@* begin tw3042c<=vi58abe[0];uk82162<=vi58abe[1];fp27501<=vi58abe[2];end
always@* begin nr6b157[2047]<=sr;nr6b157[2046]<=inpvalid;nr6b157[1023]<=ce;end         assign zxdda17 = nr6b157,vi58abe = ui685f5; initial begin bl4ab01 = $fopen(".fred"); $fdisplay( bl4ab01, "%3h\n%3h", (vi57c93 >> 4) & ri93768, (vi57c93 >> (ipf24dd+4)) & ri93768 ); $fclose(bl4ab01); $readmemh(".fred", an17d4a); end always @ (zxdda17) begin kqf52ac = an17d4a[1]; for (pf5580e=0; pf5580e<zkc55f2; pf5580e=pf5580e+1) begin ui685f5[pf5580e] = zxdda17[kqf52ac]; aaa9560 = ^(kqf52ac & an17d4a[0]); kqf52ac = {kqf52ac, aaa9560}; end end 
endmodule








































`timescale 1 ns / 100 ps
module suea6f0_gammaCorrector (
               
               clk,                 
               rstn,                
               ce,                  
               sr,                  
               cpsel,               
               din0,                
               din1,                
               din2,                
               lut0wren,            
               lut0val,             
               lut1wren,            
               lut1val,             
               lut2wren,            
               lut2val,             

               
               cpout,               
               dout0,               
               dout1,               
               dout2                
               );
parameter pdata0_width         = 8;
parameter pdata1_width         = 8;
parameter pdata2_width         = 8;
parameter plut0memebr          = 1;
parameter plut1memebr          = 1;
parameter plut2memebr          = 1;
parameter pinput_serial        = 0;
parameter pebr_thresh          = 5;
parameter pbypassen            = 1;
parameter plut0writeport       = 0;
parameter plut1writeport       = 0;
parameter plut2writeport       = 0;
parameter pgfunction           = 0;
parameter pdevice_family       = "ECP2";
localparam ww7daba  = 0;
localparam czed5d1 = (pgfunction==0) ? pdata0_width:                             (pgfunction==1) ? pdata0_width:                             (pgfunction==2) ? pdata0_width:                             (pgfunction==3) ? pdata1_width:                             (pgfunction==4) ? pdata1_width:                             (pgfunction==5) ? pdata2_width:                             (pgfunction==6) ? pdata2_width:                             (pgfunction==7) ? pdata0_width:                             pdata1_width;
localparam osd450a  = (pgfunction==0) ? "lut0_init.mem":                             (pgfunction==1) ? "lut0_init.mem":                             (pgfunction==2) ? "lut0_init.mem":                             (pgfunction==3) ? "lut1_init.mem":                             (pgfunction==4) ? "lut1_init.mem":                             (pgfunction==5) ? "lut2_init.mem":                             (pgfunction==6) ? "lut2_init.mem":                             (pgfunction==7) ? "lut0_init.mem":                             "lut1_init.mem";
localparam lde9bef    = (pgfunction==0) ? plut0memebr:                             (pgfunction==1) ? plut0memebr:                             (pgfunction==2) ? plut0memebr:                             (pgfunction==3) ? plut1memebr:                             (pgfunction==4) ? plut1memebr:                             (pgfunction==5) ? plut2memebr:                             (pgfunction==6) ? plut2memebr:                             (pgfunction==7) ? plut0memebr:                             plut1memebr;
localparam thdd60c = (pgfunction==0) ? plut0writeport:                             (pgfunction==1) ? plut0writeport:                             (pgfunction==2) ? plut0writeport:                             (pgfunction==3) ? plut1writeport:                             (pgfunction==4) ? plut1writeport:                             (pgfunction==5) ? plut2writeport:                             (pgfunction==6) ? plut2writeport:                             (pgfunction==7) ? plut0writeport:                             plut1writeport;
localparam gd3cc0f = (pgfunction==0) ? pdata1_width:                             (pgfunction==1) ? pdata0_width:                             (pgfunction==2) ? pdata0_width:                             (pgfunction==3) ? pdata0_width:                             (pgfunction==4) ? pdata0_width:                             (pgfunction==5) ? pdata0_width:                             (pgfunction==6) ? pdata0_width:                             (pgfunction==7) ? pdata2_width:                             pdata1_width;
localparam ps7ca78  = (pgfunction==0) ? "lut1_init.mem":                             (pgfunction==1) ? "lut0_init.mem":                             (pgfunction==2) ? "lut0_init.mem":                             (pgfunction==3) ? "lut0_init.mem":                             (pgfunction==4) ? "lut0_init.mem":                             (pgfunction==5) ? "lut0_init.mem":                             (pgfunction==6) ? "lut0_init.mem":                             (pgfunction==7) ? "lut2_init.mem":                             "lut1_init.mem";
localparam vx38ba8    = (pgfunction==0) ? plut1memebr:                             (pgfunction==1) ? plut0memebr:                             (pgfunction==2) ? plut0memebr:                             (pgfunction==3) ? plut0memebr:                             (pgfunction==4) ? plut0memebr:                             (pgfunction==5) ? plut0memebr:                             (pgfunction==6) ? plut0memebr:                             (pgfunction==7) ? plut2memebr:                             plut1memebr;
localparam vxaf5f4 = (pgfunction==0) ? plut1writeport:                             (pgfunction==1) ? plut0writeport:                             (pgfunction==2) ? plut0writeport:                             (pgfunction==3) ? plut0writeport:                             (pgfunction==4) ? plut0writeport:                             (pgfunction==5) ? plut0writeport:                             (pgfunction==6) ? plut0writeport:                             (pgfunction==7) ? plut2writeport:                             plut1writeport;
localparam do20f8b = (pgfunction==0) ? pdata2_width:                             (pgfunction==1) ? pdata2_width:                             (pgfunction==2) ? pdata1_width:                             (pgfunction==3) ? pdata0_width:                             (pgfunction==4) ? pdata2_width:                             (pgfunction==5) ? pdata1_width:                             (pgfunction==6) ? pdata0_width:                             (pgfunction==7) ? pdata1_width:                             pdata1_width;
localparam xwf1043  = (pgfunction==0) ? "lut2_init.mem":                             (pgfunction==1) ? "lut2_init.mem":                             (pgfunction==2) ? "lut1_init.mem":                             (pgfunction==3) ? "lut0_init.mem":                             (pgfunction==4) ? "lut2_init.mem":                             (pgfunction==5) ? "lut1_init.mem":                             (pgfunction==6) ? "lut0_init.mem":                             (pgfunction==7) ? "lut1_init.mem":                             "lut1_init.mem";
localparam ou210b9    = (pgfunction==0) ? plut2memebr:                             (pgfunction==1) ? plut2memebr:                             (pgfunction==2) ? plut1memebr:                             (pgfunction==3) ? plut0memebr:                             (pgfunction==4) ? plut2memebr:                             (pgfunction==5) ? plut1memebr:                             (pgfunction==6) ? plut0memebr:                             (pgfunction==7) ? plut1memebr:                             plut1memebr;
localparam wje2844 = (pgfunction==0) ? plut2writeport:                             (pgfunction==1) ? plut2writeport:                             (pgfunction==2) ? plut1writeport:                             (pgfunction==3) ? plut0writeport:                             (pgfunction==4) ? plut2writeport:                             (pgfunction==5) ? plut1writeport:                             (pgfunction==6) ? plut0writeport:                             (pgfunction==7) ? plut1writeport:                             plut1writeport;
input                                     clk;
input                                     rstn;
input                                     ce;
input                                     sr;
input  [1:0]                              cpsel;
input  [pdata0_width-1:0]                 din0;
input  [pdata1_width-1:0]                 din1;
input  [pdata2_width-1:0]                 din2;
input                                     lut0wren;
input  [pdata0_width-1:0]                 lut0val;
input                                     lut1wren;
input  [pdata1_width-1:0]                 lut1val;
input                                     lut2wren;
input  [pdata2_width-1:0]                 lut2val;
output [1:0]                              cpout;
output [pdata0_width-1:0]                 dout0;
output [pdata1_width-1:0]                 dout1;
output [pdata2_width-1:0]                 dout2;
wire   [czed5d1-1:0]                 yza4091;
wire   [czed5d1-1:0]                 kf246b;
wire   [gd3cc0f-1:0]                 xl91aec;
wire   [gd3cc0f-1:0]                 jp6bb30;
wire   [do20f8b-1:0]                 ldecc3a;
wire   [do20f8b-1:0]                 fc30eb2;
wire   [czed5d1-1:0]                 do3ac99;
wire   [czed5d1-1:0]                 zmb2654;
wire   [gd3cc0f-1:0]                 vk9951a;
wire   [gd3cc0f-1:0]                 en5469a;
wire   [do20f8b-1:0]                 ec1a6a8;
wire   [do20f8b-1:0]                 oh9aa04;
wire                                      zkd5025;
wire   [czed5d1-1:0]                 pf4095b;
wire                                      vk4adf;
wire   [gd3cc0f-1:0]                 aa2b7db;
wire                                      wj5bed8;
wire   [do20f8b-1:0]                 xwfb62a;
wire   [pdata0_width-1:0]                 bld8a98;
wire   [pdata1_width-1:0]                 ng2a632;
wire   [pdata2_width-1:0]                 mg98c90;
wire   [pdata0_width-1:0]                 ymf163;
wire   [pdata1_width-1:0]                 su78b19;
wire   [pdata2_width-1:0]                 vic58c9;
reg    [1:0]                              vk2f169;
reg    [1:0]                              go78b4a;
reg    [1:0]                              dmc5a51;
reg    [1:0]                              fp2d28b;
reg    [1:0]                              ne6945f;
reg    [pdata0_width-1:0]                 sh517df;
reg tw3042c;
reg uk82162;
reg [1 : 0] byfbf76;
reg [pdata0_width - 1 : 0] wl85888;
reg [pdata1_width - 1 : 0] yk6222d;
reg [pdata2_width - 1 : 0] db66fc;
reg mg9d6db;
reg [pdata0_width - 1 : 0] qt5b6ca;
reg kqdb654;
reg [pdata1_width - 1 : 0] wjd9500;
reg lqca805;
reg [pdata2_width - 1 : 0] nta0155;
reg [czed5d1 - 1 : 0] ie5579;
reg [czed5d1 - 1 : 0] bl55e43;
reg [gd3cc0f - 1 : 0] rg790f6;
reg [gd3cc0f - 1 : 0] os43d96;
reg [do20f8b - 1 : 0] nrf6583;
reg [do20f8b - 1 : 0] xy960fa;
reg [czed5d1 - 1 : 0] zm83e96;
reg [czed5d1 - 1 : 0] ayfa590;
reg [gd3cc0f - 1 : 0] hq9640f;
reg [gd3cc0f - 1 : 0] ep903d3;
reg [do20f8b - 1 : 0] qif4ef;
reg [do20f8b - 1 : 0] uvd3bcd;
reg qi9de6d;
reg [czed5d1 - 1 : 0] xw79b40;
reg ldcda03;
reg [gd3cc0f - 1 : 0] me680f9;
reg th407c9;
reg [do20f8b - 1 : 0] sw1f276;
reg [pdata0_width - 1 : 0] czc9d86;
reg [pdata1_width - 1 : 0] fa761ac;
reg [pdata2_width - 1 : 0] zm86b1f;
reg [pdata0_width - 1 : 0] lf9bf3d;
reg [pdata1_width - 1 : 0] blfcf7b;
reg [pdata2_width - 1 : 0] vx3defd;
reg [1 : 0] ba9960c;
reg [1 : 0] ykcb063;
reg [1 : 0] tu58319;
reg [1 : 0] mec18cb;
reg [1 : 0] zzc659;
reg [pdata0_width - 1 : 0] vx19672;
reg [2047:0] nr6b157;
wire [41:0] vi58abe;




localparam zkc55f2 = 42,tw2af92 = 32'hfdffca8b;
localparam [31:0] vi57c93 = tw2af92;
localparam ipf24dd = tw2af92 & 4'hf;
localparam [11:0] ri93768 = 'h7ff;
wire [(1 << ipf24dd) -1:0] zxdda17;
reg [zkc55f2-1:0] ui685f5;
reg [ipf24dd-1:0] an17d4a [0:1];
reg [ipf24dd-1:0] kqf52ac;
reg aaa9560;
integer bl4ab01;
integer pf5580e;

               
            generate      if (pbypassen == 1) begin         assign cpout = zzc659;      end      else begin         assign cpout = mec18cb;      end   endgenerate


      always @(posedge clk or negedge rstn) begin         if(rstn==1'b0) begin            vk2f169 <= 'b0;            go78b4a <= 'b0;            dmc5a51 <= 'b0;            fp2d28b <= 'b0;            ne6945f <= 'b0;         end         else  if (tw3042c) begin            if (uk82162)  begin               vk2f169 <= 'b0;               go78b4a <= 'b0;               dmc5a51 <= 'b0;               fp2d28b <= 'b0;               ne6945f <= 'b0;            end            else begin               vk2f169 <= byfbf76;               go78b4a <= ba9960c;               dmc5a51 <= ykcb063;               fp2d28b <= tu58319;               ne6945f <= mec18cb;            end         end      end

generate   if (pinput_serial == 0) begin      assign dout0 = lf9bf3d;      assign dout1 = blfcf7b;      assign dout2 = vx3defd;   end   else if (pgfunction == 7) begin      assign dout0 = vx19672;
      always @(posedge clk or negedge rstn) begin         if (!rstn) begin            sh517df <= 0;         end         else if (tw3042c) begin            if (uk82162) begin               sh517df <= 0;            end            else begin               sh517df <= 0;                              case (tu58319)                  2'b00: begin                     sh517df <= lf9bf3d;                  end                  2'b01: begin                                          sh517df[pdata0_width-1:pdata0_width-pdata1_width] <= lf9bf3d[pdata0_width-1:pdata0_width-pdata1_width];                  end                  2'b10: begin                                          sh517df[pdata0_width-1:pdata0_width-pdata2_width] <= lf9bf3d[pdata0_width-1:pdata0_width-pdata2_width];                  end               endcase            end         end      end   end   else begin      assign dout0 = vx19672;
      always @(posedge clk or negedge rstn) begin         if (!rstn) begin            sh517df <= 0;         end         else if (tw3042c) begin            if (uk82162) begin               sh517df <= 0;            end            else begin               sh517df <= 0;                              case (tu58319)                  2'b00: begin                     sh517df <= lf9bf3d;                  end                  2'b01: begin                     sh517df[pdata0_width-1:pdata0_width-pdata1_width] <= blfcf7b;                  end                  2'b10: begin                     sh517df[pdata0_width-1:pdata0_width-pdata2_width] <= vx3defd;                  end               endcase            end         end      end   end
endgenerate   assign bld8a98 = wl85888;
generate   if (pinput_serial == 0) begin      assign ng2a632 = yk6222d;   end   else begin      assign ng2a632 = wl85888[pdata0_width-1:pdata0_width-pdata1_width];   end
endgenerate
generate   if (pinput_serial == 0) begin      assign mg98c90 = db66fc;   end   else begin      assign mg98c90 = wl85888[pdata0_width-1:pdata0_width-pdata2_width];   end
endgenerate

generate   if ((pgfunction == 0)||(pgfunction == 7)) begin      assign zkd5025 = mg9d6db;      assign pf4095b  = qt5b6ca;      assign yza4091    = czc9d86;      assign ymf163   = zm83e96;      assign vk4adf = kqdb654;      assign aa2b7db  = wjd9500;      assign xl91aec    = fa761ac;      assign jp6bb30    = 0;      assign su78b19   = hq9640f;      assign wj5bed8 = lqca805;      assign xwfb62a  = nta0155;      assign ldecc3a    = zm86b1f;      assign fc30eb2    = 0;      assign vic58c9   = qif4ef;   end   else if (pgfunction == 1) begin      assign zkd5025 = mg9d6db;      assign pf4095b  = qt5b6ca;      assign yza4091    = czc9d86;      assign ymf163   = zm83e96;      assign su78b19   = ayfa590[pdata0_width-1:pdata0_width-pdata1_width];      assign vk4adf = kqdb654;      assign aa2b7db  = wjd9500;      assign xl91aec    = 0;      assign jp6bb30    = 0;      assign wj5bed8 = lqca805;      assign xwfb62a  = nta0155;      assign ldecc3a    = zm86b1f;      assign fc30eb2    = 0;      assign vic58c9   = qif4ef;   end   else if (pgfunction == 2) begin      assign zkd5025 = mg9d6db;      assign pf4095b  = qt5b6ca;      assign yza4091    = czc9d86;      assign ymf163   = zm83e96;      assign vic58c9   = ayfa590[pdata0_width-1:pdata0_width-pdata2_width];      assign vk4adf = lqca805;      assign aa2b7db  = nta0155;      assign xl91aec    = 0;      assign jp6bb30    = 0;      assign wj5bed8 = kqdb654;      assign xwfb62a  = wjd9500;      assign ldecc3a    = fa761ac;      assign fc30eb2    = 0;      assign su78b19   = qif4ef;   end   else if (pgfunction == 3) begin      assign zkd5025 = kqdb654;      assign pf4095b  = wjd9500;      assign yza4091    = fa761ac;      assign su78b19   = zm83e96;      assign vic58c9   = ayfa590[pdata1_width-1:pdata1_width-pdata2_width];      assign vk4adf = kqdb654;      assign aa2b7db  = wjd9500;      assign xl91aec    = 0;      assign jp6bb30    = 0;      assign wj5bed8 = mg9d6db;      assign xwfb62a  = qt5b6ca;      assign ldecc3a    = czc9d86;      assign fc30eb2    = 0;      assign ymf163   = qif4ef;   end   else if (pgfunction == 4) begin      assign zkd5025 = kqdb654;      assign pf4095b  = wjd9500;      assign yza4091    = fa761ac;      assign su78b19   = zm83e96;      assign ymf163   = ayfa590[pdata1_width-1:pdata1_width-pdata0_width];      assign vk4adf = mg9d6db;      assign aa2b7db  = qt5b6ca;      assign xl91aec    = 0;      assign jp6bb30    = 0;      assign wj5bed8 = lqca805;      assign xwfb62a  = nta0155;      assign ldecc3a    = zm86b1f;      assign fc30eb2    = 0;      assign vic58c9   = qif4ef;   end   else if (pgfunction == 5) begin      assign zkd5025 = lqca805;      assign pf4095b  = nta0155;      assign yza4091    = zm86b1f;      assign vic58c9   = zm83e96;      assign ymf163   = ayfa590[pdata2_width-1:pdata2_width-pdata0_width];      assign vk4adf = kqdb654;      assign aa2b7db  = wjd9500;      assign xl91aec    = 0;      assign jp6bb30    = 0;      assign wj5bed8 = kqdb654;      assign xwfb62a  = wjd9500;      assign ldecc3a    = fa761ac;      assign fc30eb2    = 0;      assign su78b19   = qif4ef;   end   else if (pgfunction == 6) begin      assign zkd5025 = lqca805;      assign pf4095b  = nta0155;      assign yza4091    = zm86b1f;      assign vic58c9   = zm83e96;      assign su78b19   = ayfa590[pdata2_width-1:pdata2_width-pdata1_width];      assign vk4adf = kqdb654;      assign aa2b7db  = wjd9500;      assign xl91aec    = 0;      assign jp6bb30    = 0;      assign wj5bed8 = mg9d6db;      assign xwfb62a  = qt5b6ca;      assign ldecc3a    = czc9d86;      assign fc30eb2    = 0;      assign ymf163   = qif4ef;   end
endgenerate
generate   if (pgfunction == 0) begin      assign kf246b    = 0;   end   else if ((pgfunction == 1)&&(pdata0_width==pdata1_width)) begin      assign kf246b    = fa761ac;   end   else if ((pgfunction == 1)&&(pdata0_width > pdata1_width)) begin      assign kf246b    = {fa761ac,{(pdata0_width-pdata1_width){1'b0}}};   end   else if ((pgfunction == 2)&&(pdata0_width==pdata2_width)) begin      assign kf246b    = zm86b1f;   end   else if ((pgfunction == 2)&&(pdata0_width > pdata2_width)) begin      assign kf246b    = {zm86b1f,{(pdata0_width-pdata2_width){1'b0}}};   end   else if ((pgfunction == 3)&&(pdata1_width==pdata2_width)) begin      assign kf246b    = zm86b1f;   end   else if ((pgfunction == 3)&&(pdata1_width > pdata2_width)) begin      assign kf246b    = {zm86b1f,{(pdata1_width-pdata2_width){1'b0}}};   end   else if (pgfunction == 4) begin      assign kf246b    = {czc9d86,{(pdata1_width-pdata0_width){1'b0}}};   end   else if (pgfunction == 5) begin      assign kf246b    = {czc9d86,{(pdata2_width-pdata0_width){1'b0}}};   end   else if (pgfunction == 6) begin      assign kf246b    = {fa761ac,{(pdata2_width-pdata1_width){1'b0}}};   end
endgenerate



      hq2a832_gammaCorrector #(                      .fnc77ec            (thdd60c),                      .fnd863b               (czed5d1),                      .pebr_thresh               (pebr_thresh),                      .yxfd9c3                (osd450a),                      .sw3bf67                  (lde9bef),                      .cb18efd                 (ww7daba),                      .pdevice_family            (pdevice_family)                )      fa5dc89 (                                 .clk                     (clk          ),                  .rstn                    (rstn         ),                  .ce                      (tw3042c           ),                  .sr                      (uk82162           ),                  .din0                    (ie5579        ),                  .din1                    (bl55e43        ),                  .dmeefd8                 (qi9de6d     ),                  .ww77ec3                  (xw79b40      ),                                 .dout0                   (do3ac99       ),                  .dout1                   (zmb2654       )               );
      hq2a832_gammaCorrector #(                      .fnc77ec            (vxaf5f4),                      .fnd863b               (gd3cc0f),                      .pebr_thresh               (pebr_thresh),                      .yxfd9c3                (ps7ca78),                      .sw3bf67                  (vx38ba8),                      .cb18efd                 (ww7daba),                      .pdevice_family            (pdevice_family)                )      en7015d (                                 .clk                     (clk          ),                  .rstn                    (rstn         ),                  .ce                      (tw3042c           ),                  .sr                      (uk82162           ),                  .din0                    (rg790f6        ),                  .din1                    (os43d96        ),                  .dmeefd8                 (ldcda03     ),                  .ww77ec3                  (me680f9      ),                                 .dout0                   (vk9951a       ),                  .dout1                   (en5469a       )               );      hq2a832_gammaCorrector #(                      .fnc77ec            (wje2844),                      .fnd863b               (do20f8b),                      .pebr_thresh               (pebr_thresh),                      .yxfd9c3                (xwf1043),                      .sw3bf67                  (ou210b9),                      .cb18efd                 (ww7daba),                      .pdevice_family            (pdevice_family)                )      ks31221 (                                 .clk                     (clk          ),                  .rstn                    (rstn         ),                  .ce                      (tw3042c           ),                  .sr                      (uk82162           ),                  .din0                    (nrf6583        ),                  .din1                    (xy960fa        ),                  .dmeefd8                 (th407c9     ),                  .ww77ec3                  (sw1f276      ),                                 .dout0                   (ec1a6a8       ),                  .dout1                   (oh9aa04       )               );

always@* begin tw3042c<=vi58abe[0];uk82162<=vi58abe[1];byfbf76<={cpsel>>1,vi58abe[2]};wl85888<={din0>>1,vi58abe[3]};yk6222d<={din1>>1,vi58abe[4]};db66fc<={din2>>1,vi58abe[5]};mg9d6db<=vi58abe[6];qt5b6ca<={lut0val>>1,vi58abe[7]};kqdb654<=vi58abe[8];wjd9500<={lut1val>>1,vi58abe[9]};lqca805<=vi58abe[10];nta0155<={lut2val>>1,vi58abe[11]};ie5579<={yza4091>>1,vi58abe[12]};bl55e43<={kf246b>>1,vi58abe[13]};rg790f6<={xl91aec>>1,vi58abe[14]};os43d96<={jp6bb30>>1,vi58abe[15]};nrf6583<={ldecc3a>>1,vi58abe[16]};xy960fa<={fc30eb2>>1,vi58abe[17]};zm83e96<={do3ac99>>1,vi58abe[18]};ayfa590<={zmb2654>>1,vi58abe[19]};hq9640f<={vk9951a>>1,vi58abe[20]};ep903d3<={en5469a>>1,vi58abe[21]};qif4ef<={ec1a6a8>>1,vi58abe[22]};uvd3bcd<={oh9aa04>>1,vi58abe[23]};qi9de6d<=vi58abe[24];xw79b40<={pf4095b>>1,vi58abe[25]};ldcda03<=vi58abe[26];me680f9<={aa2b7db>>1,vi58abe[27]};th407c9<=vi58abe[28];sw1f276<={xwfb62a>>1,vi58abe[29]};czc9d86<={bld8a98>>1,vi58abe[30]};fa761ac<={ng2a632>>1,vi58abe[31]};zm86b1f<={mg98c90>>1,vi58abe[32]};lf9bf3d<={ymf163>>1,vi58abe[33]};blfcf7b<={su78b19>>1,vi58abe[34]};vx3defd<={vic58c9>>1,vi58abe[35]};ba9960c<={vk2f169>>1,vi58abe[36]};ykcb063<={go78b4a>>1,vi58abe[37]};tu58319<={dmc5a51>>1,vi58abe[38]};mec18cb<={fp2d28b>>1,vi58abe[39]};zzc659<={ne6945f>>1,vi58abe[40]};vx19672<={sh517df>>1,vi58abe[41]};end
always@* begin nr6b157[2047]<=sr;nr6b157[2046]<=cpsel[0];nr6b157[2044]<=din0[0];nr6b157[2040]<=din1[0];nr6b157[2032]<=din2[0];nr6b157[2017]<=lut0wren;nr6b157[1987]<=lut0val[0];nr6b157[1926]<=lut1wren;nr6b157[1805]<=vic58c9[0];nr6b157[1804]<=lut1val[0];nr6b157[1803]<=oh9aa04[0];nr6b157[1761]<=mg98c90[0];nr6b157[1562]<=vk2f169[0];nr6b157[1560]<=lut2wren;nr6b157[1558]<=zkd5025;nr6b157[1550]<=ldecc3a[0];nr6b157[1475]<=ymf163[0];nr6b157[1464]<=bld8a98[0];nr6b157[1076]<=go78b4a[0];nr6b157[1072]<=lut2val[0];nr6b157[1069]<=pf4095b[0];nr6b157[1052]<=fc30eb2[0];nr6b157[1023]<=ce;nr6b157[902]<=su78b19[0];nr6b157[901]<=ec1a6a8[0];nr6b157[880]<=ng2a632[0];nr6b157[834]<=sh517df[0];nr6b157[775]<=jp6bb30[0];nr6b157[732]<=xwfb62a[0];nr6b157[450]<=en5469a[0];nr6b157[417]<=ne6945f[0];nr6b157[387]<=xl91aec[0];nr6b157[366]<=wj5bed8;nr6b157[225]<=vk9951a[0];nr6b157[208]<=fp2d28b[0];nr6b157[193]<=kf246b[0];nr6b157[183]<=aa2b7db[0];nr6b157[112]<=zmb2654[0];nr6b157[104]<=dmc5a51[0];nr6b157[96]<=yza4091[0];nr6b157[91]<=vk4adf;nr6b157[56]<=do3ac99[0];end         assign zxdda17 = nr6b157,vi58abe = ui685f5; initial begin bl4ab01 = $fopen(".fred"); $fdisplay( bl4ab01, "%3h\n%3h", (vi57c93 >> 4) & ri93768, (vi57c93 >> (ipf24dd+4)) & ri93768 ); $fclose(bl4ab01); $readmemh(".fred", an17d4a); end always @ (zxdda17) begin kqf52ac = an17d4a[1]; for (pf5580e=0; pf5580e<zkc55f2; pf5580e=pf5580e+1) begin ui685f5[pf5580e] = zxdda17[kqf52ac]; aaa9560 = ^(kqf52ac & an17d4a[0]); kqf52ac = {kqf52ac, aaa9560}; end end 
endmodule





























`timescale 1 ns / 100 ps
module gammaCorrector (
               
               clk,                 
               rstn,                
               `ifdef CLKEN
                  ce,               
               `endif
               `ifdef SYNCRST
                  sr,               
               `endif
               `ifdef BYPASSEN
                  gcen,             
               `endif
               inpvalid,            
               din0,                
               `ifdef LUT0WRITEPORT
                  lut0wren,         
                  lut0val,          
               `endif 
               `ifdef INPUT_SERIAL 
                  cpsel,            
               `endif 
               `ifndef INPUT_SERIAL 
                  `ifdef NUMCP2
                     din1,          
                     `ifdef LUT1WRITEPORT
                        lut1wren,   
                        lut1val,    
                     `endif 
                  `endif 
                  `ifdef NUMCP3
                     din2,          
                     `ifdef LUT2WRITEPORT
                        lut2wren,   
                        lut2val,    
                     `endif 
                  `endif 
               `endif 

               
               `ifdef BYPASSEN
                  gcvalid,          
               `endif
               outvalid,            
               `ifdef INPUT_SERIAL 
                  cpout,            
               `endif 
               `ifndef INPUT_SERIAL 
                  `ifdef NUMCP2
                     dout1,         
                  `endif 
                  `ifdef NUMCP3
                     dout2,         
                  `endif 
               `endif 
               dout0                
               )
    `ifdef DEVICE_ECP2
                    
    `else
    `ifdef DEVICE_ECP2M
                    
    `else
    `ifdef DEVICE_XP2
                    
    `else
    `ifdef DEVICE_ECP3
                    
    `else
    `ifdef DEVICE_ECP5
                    
    `else
                    
    `endif
    `endif
    `endif
    `endif
    `endif
     
;
parameter pdata0_width         = 8;
parameter pdata1_width         = 8;
parameter pdata2_width         = 8;
parameter plut0memebr          = 1;
parameter plut1memebr          = 1;
parameter plut2memebr          = 1;
parameter platency             = 5;
parameter pdevice_family       = "ECP2M";
parameter pinreg               = 1;
parameter pinput_serial        = 0;
parameter pbypassen            = 0;
parameter pcplane1             = 1;
parameter pcplane2             = 1;
parameter pgfunction           = 0;
parameter pcpsel_width         = 2;
parameter plut0writeport       = 0;
parameter plut1writeport       = 0;
parameter plut2writeport       = 0;
parameter pebr_thresh          = 5;
input                                     clk;
input                                     rstn;

`ifdef CLKEN
input                                  ce;

`endif

`ifdef SYNCRST
input                                  sr;

`endif

`ifdef BYPASSEN
input                                  gcen;

`endif
input                                     inpvalid;
input  [pdata0_width-1:0]                 din0;

`ifdef LUT0WRITEPORT
input                                  lut0wren;
input  [pdata0_width-1:0]              lut0val;

`endif

`ifdef INPUT_SERIAL 
input  [pcpsel_width-1:0]              cpsel;

`endif

`ifndef INPUT_SERIAL 

`ifdef NUMCP2
input  [pdata1_width-1:0]           din1;

`ifdef LUT1WRITEPORT
input                            lut1wren;
input  [pdata1_width-1:0]        lut1val;

`endif

`endif 

`ifdef NUMCP3
input  [pdata2_width-1:0]           din2;

`ifdef LUT2WRITEPORT
input                            lut2wren;
input  [pdata2_width-1:0]        lut2val;

`endif

`endif 

`endif

`ifdef BYPASSEN
output                                 gcvalid;

`endif
output                                    outvalid;
output [pdata0_width-1:0]                 dout0;

`ifdef INPUT_SERIAL 
output [pcpsel_width-1:0]              cpout;

`endif

`ifndef INPUT_SERIAL 

`ifdef NUMCP2
output  [pdata1_width-1:0]          dout1;

`endif 

`ifdef NUMCP3
output  [pdata2_width-1:0]          dout2;

`endif 

`endif
wire                                      bld896d;
wire                                      uic4b6e;
wire                                      je25b71;
wire                                      nt2db8a;
wire                                      co9200f;
wire                                      nt32401;
wire  [pdata0_width-1:0]                  bld8a98;
wire  [pdata1_width-1:0]                  ng2a632;
wire  [pdata2_width-1:0]                  mg98c90;
wire  [pdata1_width-1:0]                  din1;
wire  [pdata2_width-1:0]                  din2;
wire                                      lut0wren;
wire  [pdata0_width-1:0]                  lut0val;
wire                                      lut1wren;
wire  [pdata1_width-1:0]                  lut1val;
wire                                      lut2wren;
wire  [pdata2_width-1:0]                  lut2val;
wire                                      cm56ddb;
wire  [pdata0_width-1:0]                  pub76c8;
wire                                      uxbb643;
wire  [pdata1_width-1:0]                  qtd90e8;
wire                                      rtc8745;
wire  [pdata2_width-1:0]                  ep1d170;
wire                                      yxe8b85;
wire  [pdata0_width-1:0]                  ie2e167;
wire                                      ip70b38;
wire  [pdata1_width-1:0]                  ep2ce2d;
wire                                      ay6716c;
wire  [pdata2_width-1:0]                  dmc5b07;
wire                                      fp2d83b;
wire  [pdata1_width-1:0]                  uv60ef3;
wire                                      wl779c;
wire  [pdata2_width-1:0]                  mede728;
wire  [pdata0_width-1:0]                  ymf163;
wire  [pdata1_width-1:0]                  su78b19;
wire  [pdata2_width-1:0]                  vic58c9;
wire  [pdata0_width-1:0]                  dout0;
wire  [pdata1_width-1:0]                  dout1;
wire  [pdata2_width-1:0]                  dout2;
wire  [pcpsel_width-1:0]                  lqf4802;
wire  [1:0]                               oha4013;
wire  [1:0]                               do2009d;
wire  [pcpsel_width-1:0]                  cpout;
wire                                      fp13ac5;
wire                                      gcen;
wire                                      gcvalid;
wire                                      by58bca;
wire                                      vic5e52;
wire                                      ri2f293;

`ifdef CLKEN

`else

`endif

`ifdef SYNCRST

`else

`endif
reg by7949a;
reg fp27501;
reg [pdata0_width - 1 : 0] wl85888;
reg yz9a4d2;
reg zxd2694;
reg ba934a6;
reg sj9a532;
reg qg495ec;
reg ipc92bd;
reg [pdata0_width - 1 : 0] czc9d86;
reg [pdata1_width - 1 : 0] fa761ac;
reg [pdata2_width - 1 : 0] zm86b1f;
reg ng86cc9;
reg [pdata0_width - 1 : 0] swb3255;
reg ri992a9;
reg [pdata1_width - 1 : 0] rt4aa5c;
reg nr552e6;
reg [pdata2_width - 1 : 0] sh4b9b9;
reg su5cdcc;
reg [pdata0_width - 1 : 0] vx37307;
reg oub983f;
reg [pdata1_width - 1 : 0] en60fcc;
reg yz7e64;
reg [pdata2_width - 1 : 0] thf9923;
reg encc91f;
reg [pdata1_width - 1 : 0] wy247ee;
reg qv23f71;
reg [pdata2_width - 1 : 0] gbfdc69;
reg [pdata0_width - 1 : 0] lf9bf3d;
reg [pdata1_width - 1 : 0] blfcf7b;
reg [pdata2_width - 1 : 0] vx3defd;
reg [pcpsel_width - 1 : 0] jeb84aa;
reg [1 : 0] zxc2552;
reg [1 : 0] yz12a97;
reg yz954bd;
reg zzaa5ed;
reg ne52f6e;
reg mg97b73;
reg [2047:0] nr6b157;
wire [37:0] vi58abe;

`ifdef CLKEN

`endif

`ifdef SYNCRST

`endif

`ifdef BYPASSEN

`endif

`ifdef LUT0WRITEPORT

`endif

`ifdef INPUT_SERIAL 

`endif

`ifndef INPUT_SERIAL 

`ifdef NUMCP2

`ifdef LUT1WRITEPORT

`endif

`endif 

`ifdef NUMCP3

`ifdef LUT2WRITEPORT

`endif

`endif 

`endif

`ifdef BYPASSEN

`endif

`ifdef INPUT_SERIAL 

`endif

`ifndef INPUT_SERIAL 

`ifdef NUMCP2

`endif 

`ifdef NUMCP3

`endif 

`endif

`ifdef CLKEN

`else

`endif

`ifdef SYNCRST

`else

`endif















localparam zkc55f2 = 38,tw2af92 = 32'hfdffd42b;
localparam [31:0] vi57c93 = tw2af92;
localparam ipf24dd = tw2af92 & 4'hf;
localparam [11:0] ri93768 = 'h7ff;
wire [(1 << ipf24dd) -1:0] zxdda17;
reg [zkc55f2-1:0] ui685f5;
reg [ipf24dd-1:0] an17d4a [0:1];
reg [ipf24dd-1:0] kqf52ac;
reg aaa9560;
integer bl4ab01;
integer pf5580e;


`ifdef CLKEN


`endif


`ifdef SYNCRST


`endif


`ifdef BYPASSEN


`endif


`ifdef LUT0WRITEPORT


`endif


`ifdef INPUT_SERIAL 


`endif


`ifndef INPUT_SERIAL 


`ifdef NUMCP2


`ifdef LUT1WRITEPORT


`endif


`endif 


`ifdef NUMCP3


`ifdef LUT2WRITEPORT


`endif


`endif 


`endif


`ifdef BYPASSEN


`endif


`ifdef INPUT_SERIAL 


`endif


`ifndef INPUT_SERIAL 


`ifdef NUMCP2


`endif 


`ifdef NUMCP3


`endif 


`endif


`ifdef CLKEN


`else


`endif


`ifdef SYNCRST


`else


`endif

                                                         




`ifdef CLKEN



`endif



`ifdef SYNCRST



`endif



`ifdef BYPASSEN



`endif



`ifdef LUT0WRITEPORT



`endif



`ifdef INPUT_SERIAL 



`endif



`ifndef INPUT_SERIAL 



`ifdef NUMCP2



`ifdef LUT1WRITEPORT



`endif



`endif 



`ifdef NUMCP3



`ifdef LUT2WRITEPORT



`endif



`endif 



`endif





`ifdef BYPASSEN



`endif



`ifdef INPUT_SERIAL 



`endif



`ifndef INPUT_SERIAL 



`ifdef NUMCP2



`endif 



`ifdef NUMCP3



`endif 



`endif


   assign oha4013 = jeb84aa;   assign cpout  = yz12a97;


`ifdef CLKEN
      assign uic4b6e       = ce;


`else
      assign uic4b6e       = 1'b1;


`endif



`ifdef SYNCRST
      assign bld896d     = sr;


`else
      assign bld896d     = 1'b0;


`endif
   assign je25b71         = fp27501;   assign outvalid       = sj9a532;   assign fp2d83b  = lut0wren;   assign uv60ef3   = lut0val;   assign wl779c  = lut0wren;   assign mede728   = lut0val;   generate      if (plut0writeport == 1) begin         assign cm56ddb  = lut0wren;         assign pub76c8   = lut0val;      end      else begin         assign cm56ddb  = 1'b0;         assign pub76c8   = 0;      end   endgenerate   generate      if ((plut1writeport == 1)&&(pinput_serial ==1)) begin         assign uxbb643  = encc91f;         assign qtd90e8   = wy247ee;      end      else if (plut1writeport == 1) begin         assign uxbb643  = lut1wren;         assign qtd90e8   = lut1val;      end      else begin         assign uxbb643  = 1'b0;         assign qtd90e8   = 0;      end   endgenerate   generate      if ((plut2writeport == 1)&&(pinput_serial ==1)) begin         assign rtc8745  = qv23f71;         assign ep1d170   = gbfdc69;      end      else if (plut2writeport == 1) begin         assign rtc8745  = lut2wren;         assign ep1d170   = lut2val;      end      else begin         assign rtc8745  = 1'b0;         assign ep1d170   = 0;      end   endgenerate   generate      if ((plut0writeport == 1)&&(pinput_serial ==1)) begin         assign by58bca = su5cdcc & (zxc2552==0);      end      else begin         assign by58bca = su5cdcc ;      end   endgenerate   generate      if ((plut1writeport == 1)&&(pinput_serial ==1)) begin         assign vic5e52 = oub983f & (zxc2552==1);      end      else begin         assign vic5e52 = oub983f ;      end   endgenerate   generate      if ((plut2writeport == 1)&&(pinput_serial ==1)&&(pcplane2 ==1)) begin         assign ri2f293 = yz7e64 & (zxc2552==2);      end      else begin         assign ri2f293 = yz7e64 ;      end   endgenerate





   generate   if ((pinreg == 1)&&(pbypassen ==1))  begin      hq9c047_gammaCorrector # (         .zkcaacd        (1)         )         vve6a82 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (gcen),                                .ofd9559              (fp13ac5)                 );   end   else if (pbypassen ==1) begin      assign fp13ac5  = gcen;   end   else begin      assign fp13ac5  = 1'b1;   end   endgenerate

   generate   if (pinreg == 1) begin      hq9c047_gammaCorrector # (         .zkcaacd        (pdata0_width)         )         cb26b20 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (wl85888),                                .ofd9559              (bld8a98)                 );   end   else begin      assign bld8a98 = wl85888;   end   endgenerate
   generate   if ((pinreg == 1)&&(pinput_serial==0)&&(pcplane1==1)) begin      hq9c047_gammaCorrector # (         .zkcaacd        (pdata1_width)         )         su4c41c (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (din1),                                .ofd9559              (ng2a632)                 );   end   else begin      assign ng2a632 = din1;   end   endgenerate
  generate  if ((pinreg == 1)&&(pinput_serial==0)&&(pcplane2==1)) begin     hq9c047_gammaCorrector # (        .zkcaacd        (pdata2_width)        )        cm43ae2 (                      .clk               (clk),                 .rstn              (by7949a),                .ce                (zxd2694),               .sr                (yz9a4d2),             .ec3b2ab               (din2),                              .ofd9559              (mg98c90)                );  end  else begin     assign mg98c90 = din2;  end  endgenerate
   generate   if ((pinreg == 1)&&(plut0writeport == 1)) begin      hq9c047_gammaCorrector # (         .zkcaacd        (1)         )         kqcb3b3 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (ng86cc9),                            .ofd9559              (yxe8b85)             );      hq9c047_gammaCorrector # (         .zkcaacd        (pdata0_width)         )         nec5cbd (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (swb3255),                             .ofd9559              (ie2e167)              );   end   else begin      assign yxe8b85 = ng86cc9;      assign ie2e167  = swb3255;   end   endgenerate
   generate   if ((pinreg == 1)&&(plut1writeport == 1)) begin      hq9c047_gammaCorrector # (         .zkcaacd        (1)         )         viebc72 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (ri992a9),                            .ofd9559              (ip70b38)             );      hq9c047_gammaCorrector # (         .zkcaacd        (pdata1_width)         )         co8d569 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (rt4aa5c),                             .ofd9559              (ep2ce2d)              );   end   else begin      assign ip70b38 = ri992a9;      assign ep2ce2d  = rt4aa5c;   end   endgenerate
   generate   if ((pinreg == 1)&&(plut2writeport == 1)) begin      hq9c047_gammaCorrector # (         .zkcaacd        (1)         )         rv94975 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (nr552e6),                            .ofd9559              (ay6716c)             );      hq9c047_gammaCorrector # (         .zkcaacd        (pdata2_width)         )         me46239 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .ec3b2ab               (sh4b9b9),                             .ofd9559              (dmc5b07)              );   end   else begin      assign ay6716c = nr552e6;      assign dmc5b07  = sh4b9b9;   end   endgenerate
  generate  if (pinput_serial==1) begin     hq9c047_gammaCorrector # (        .zkcaacd        (pcpsel_width)        )        vve6a82 (                      .clk               (clk),                 .rstn              (by7949a),                .ce                (zxd2694),               .sr                (yz9a4d2),             .ec3b2ab               (cpsel),                             .ofd9559              (lqf4802)               );  end  endgenerate

      suea6f0_gammaCorrector #(         .pdata0_width      (pdata0_width),         .pdata1_width      (pdata1_width),         .pdata2_width      (pdata2_width),         .plut0memebr       (plut0memebr),         .plut1memebr       (plut1memebr),         .plut2memebr       (plut2memebr),         .plut0writeport    (plut0writeport),         .plut1writeport    (plut1writeport),         .plut2writeport    (plut2writeport),         .pebr_thresh       (pebr_thresh),         .pgfunction        (pgfunction),         .pinput_serial     (pinput_serial),         .pbypassen         (pbypassen),         .pdevice_family    (pdevice_family)         )        by79015 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .cpsel             (zxc2552),               .din0              (czc9d86),                .din1              (fa761ac),                .din2              (zm86b1f),                .lut0wren          (zzaa5ed),           .lut0val           (vx37307),             .lut1wren          (ne52f6e),           .lut1val           (en60fcc),             .lut2wren          (mg97b73),           .lut2val           (thf9923),                            .cpout             (do2009d),               .dout0             (ymf163),               .dout1             (su78b19),               .dout2             (vic58c9)                );      gq583d_gammaCorrector # (         .pinput_serial     (pinput_serial),         .pinreg            (pinreg),         .platency          (platency)         )         cb26209 (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .inpvalid          (ba934a6),                              .vi4d936     (nt32401),          .vi6c9b3     (co9200f),          .outvalid          (nt2db8a)                );   generate   if (pbypassen == 1) begin   rt74468_gammaCorrector # (         .pdata0_width      (pdata0_width),         .pdata1_width      (pdata1_width),         .pdata2_width      (pdata2_width),         .pinput_serial     (pinput_serial),         .platency          (platency)         )         su67b6b (                        .clk               (clk),                  .rstn              (by7949a),                 .ce                (zxd2694),                .sr                (yz9a4d2),              .gcen              (yz954bd),                .nt32401       (ipc92bd),          .co9200f       (qg495ec),          .din0              (czc9d86),                .din1              (fa761ac),                .din2              (zm86b1f),                .ymf163            (lf9bf3d),               .su78b19            (blfcf7b),               .vic58c9            (vx3defd),                              .sj2c64b        (gcvalid),              .dout2             (dout2),                .dout1             (dout1),                .dout0             (dout0)                 );   end   else begin      assign dout0 = lf9bf3d;      assign dout1 = blfcf7b;      assign dout2 = vx3defd;   end   endgenerate
               

always@* begin by7949a<=vi58abe[0];fp27501<=vi58abe[1];wl85888<={din0>>1,vi58abe[2]};yz9a4d2<=vi58abe[3];zxd2694<=vi58abe[4];ba934a6<=vi58abe[5];sj9a532<=vi58abe[6];qg495ec<=vi58abe[7];ipc92bd<=vi58abe[8];czc9d86<={bld8a98>>1,vi58abe[9]};fa761ac<={ng2a632>>1,vi58abe[10]};zm86b1f<={mg98c90>>1,vi58abe[11]};ng86cc9<=vi58abe[12];swb3255<={pub76c8>>1,vi58abe[13]};ri992a9<=vi58abe[14];rt4aa5c<={qtd90e8>>1,vi58abe[15]};nr552e6<=vi58abe[16];sh4b9b9<={ep1d170>>1,vi58abe[17]};su5cdcc<=vi58abe[18];vx37307<={ie2e167>>1,vi58abe[19]};oub983f<=vi58abe[20];en60fcc<={ep2ce2d>>1,vi58abe[21]};yz7e64<=vi58abe[22];thf9923<={dmc5b07>>1,vi58abe[23]};encc91f<=vi58abe[24];wy247ee<={uv60ef3>>1,vi58abe[25]};qv23f71<=vi58abe[26];gbfdc69<={mede728>>1,vi58abe[27]};lf9bf3d<={ymf163>>1,vi58abe[28]};blfcf7b<={su78b19>>1,vi58abe[29]};vx3defd<={vic58c9>>1,vi58abe[30]};jeb84aa<={lqf4802>>1,vi58abe[31]};zxc2552<={oha4013>>1,vi58abe[32]};yz12a97<={do2009d>>1,vi58abe[33]};yz954bd<=vi58abe[34];zzaa5ed<=vi58abe[35];ne52f6e<=vi58abe[36];mg97b73<=vi58abe[37];end
always@* begin nr6b157[2047]<=inpvalid;nr6b157[2046]<=din0[0];nr6b157[2044]<=bld896d;nr6b157[2041]<=uic4b6e;nr6b157[2035]<=je25b71;nr6b157[2022]<=nt2db8a;nr6b157[1996]<=co9200f;nr6b157[1945]<=nt32401;nr6b157[1922]<=uv60ef3[0];nr6b157[1842]<=bld8a98[0];nr6b157[1797]<=wl779c;nr6b157[1776]<=ay6716c;nr6b157[1637]<=ng2a632[0];nr6b157[1622]<=uxbb643;nr6b157[1546]<=mede728[0];nr6b157[1504]<=dmc5b07[0];nr6b157[1468]<=ip70b38;nr6b157[1391]<=yxe8b85;nr6b157[1312]<=fp13ac5;nr6b157[1226]<=mg98c90[0];nr6b157[1197]<=qtd90e8[0];nr6b157[1153]<=vic5e52;nr6b157[1044]<=ymf163[0];nr6b157[1023]<=rstn;nr6b157[961]<=fp2d83b;nr6b157[888]<=ep2ce2d[0];nr6b157[811]<=pub76c8[0];nr6b157[734]<=ie2e167[0];nr6b157[695]<=ep1d170[0];nr6b157[656]<=do2009d[0];nr6b157[576]<=by58bca;nr6b157[405]<=cm56ddb;nr6b157[347]<=rtc8745;nr6b157[328]<=oha4013[0];nr6b157[259]<=ri2f293;nr6b157[164]<=lqf4802[0];nr6b157[82]<=vic58c9[0];nr6b157[41]<=su78b19[0];end         assign zxdda17 = nr6b157,vi58abe = ui685f5; initial begin bl4ab01 = $fopen(".fred"); $fdisplay( bl4ab01, "%3h\n%3h", (vi57c93 >> 4) & ri93768, (vi57c93 >> (ipf24dd+4)) & ri93768 ); $fclose(bl4ab01); $readmemh(".fred", an17d4a); end always @ (zxdda17) begin kqf52ac = an17d4a[1]; for (pf5580e=0; pf5580e<zkc55f2; pf5580e=pf5580e+1) begin ui685f5[pf5580e] = zxdda17[kqf52ac]; aaa9560 = ^(kqf52ac & an17d4a[0]); kqf52ac = {kqf52ac, aaa9560}; end end 
endmodule

